/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.25
 * Generated at: 2024-07-31 03:34:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import com.hmw.jsp.wifi.dao.SearchWifi;
import com.hmw.jsp.wifi.dao.HistoryDao;
import com.hmw.jsp.wifi.dto.WifiDto;
import com.hmw.jsp.wifi.dto.HistoryDto;
import java.util.ArrayList;
import java.util.List;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/jsp/header.jsp", Long.valueOf(1722338900579L));
    _jspx_dependants.put("/jsp/main.jsp", Long.valueOf(1722341095549L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(8);
    _jspx_imports_classes.add("com.hmw.jsp.wifi.dao.SearchWifi");
    _jspx_imports_classes.add("com.hmw.jsp.wifi.dao.HistoryDao");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.hmw.jsp.wifi.dto.WifiDto");
    _jspx_imports_classes.add("com.hmw.jsp.wifi.dto.HistoryDto");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<head>\n");
      out.write("    <title>와이파이 정보 구하기</title>\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("<h1>와이파이 정보 구하기</h1>\n");
      out.write("\n");
      out.write("\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"css/style.css\">\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("<div>\n");
      out.write("    <a href=\"http://localhost:8080\">홈</a> |\n");
      out.write("    <a href=\"http://localhost:8080/wifi/historyList.jsp\">위치 히스토리 목록</a> |\n");
      out.write("    <a href=\"http://localhost:8080/wifi/load-wifi\">Open API 와이파이 정보 가져오기</a> |\n");
      out.write("    <a href=\"http://localhost:8080/wifi/bookmark-list.jsp\">즐겨 찾기 보기</a> |\n");
      out.write("    <a href=\"http://localhost:8080/wifi/bookmark-group.jsp\">즐겨 찾기 그룹 관리</a>\n");
      out.write("</div>\n");
      out.write("</body>");
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"css/style.css\">\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("    ");

    String lat = (String)request.getParameter("lat");
    String lnt = (String)request.getParameter("lnt");
    
      out.write("\n");
      out.write("\n");
      out.write("<div>\n");
      out.write("    <br>\n");
      out.write("    LAT : <input id=\"lat\" type=\"text\" value=\"0.0\">\n");
      out.write("    LNT : <input id=\"lnt\" type=\"text\" value=\"0.0\">\n");
      out.write("    <button id=\"btn_myLocation\">내 위치 가져오기</button>\n");
      out.write("    <button id=\"btn_nearbyWifi\">근처 WIFI 정보 보기</button>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("    let getLocation = document.getElementById(\"btn_myLocation\");\n");
      out.write("    let getNearByWifi = document.getElementById(\"btn_nearbyWifi\");\n");
      out.write("\n");
      out.write("    window.onload = () => {\n");
      out.write("        let lat = document.getElementById(\"lat\").value;\n");
      out.write("        let lnt = document.getElementById(\"lnt\").value;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    getLocation.addEventListener(\"click\", function () {\n");
      out.write("        if ('geolocation' in navigator) {\n");
      out.write("            navigator.geolocation.getCurrentPosition(function (position){\n");
      out.write("                let latitude = position.coords.latitude;\n");
      out.write("                let longitude = position.coords.longitude;\n");
      out.write("                document.getElementById(\"lat\").value = latitude;\n");
      out.write("                document.getElementById(\"lnt\").value = longitude;\n");
      out.write("            });\n");
      out.write("        }\n");
      out.write("    });\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("    getNearByWifi.addEventListener(\"click\", function (){\n");
      out.write("        let latitude = document.getElementById(\"lat\").value;\n");
      out.write("        let longitude = document.getElementById(\"lnt\").value;\n");
      out.write("\n");
      out.write("        if (latitude !== \"\" || longitude !== \"\") {\n");
      out.write("            window.location.assign(\"http://localhost:8080/?lat=\" + latitude + \"&lnt=\" + longitude);\n");
      out.write("        } else {\n");
      out.write("            alert(\"위치 정보를 입력한 후에 조회해 주세요.\");\n");
      out.write("        }\n");
      out.write("    });\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("<div>\n");
      out.write("    <table>\n");
      out.write("        <br>\n");
      out.write("        <thead>\n");
      out.write("        <tr>\n");
      out.write("            <th>거리(Km)</th>\n");
      out.write("            <th>관리번호</th>\n");
      out.write("            <th>자치구</th>\n");
      out.write("            <th>와이파이명</th>\n");
      out.write("            <th>도로명주소</th>\n");
      out.write("            <th>상세주소</th>\n");
      out.write("            <th>설치위치(층)</th>\n");
      out.write("            <th>설치유형</th>\n");
      out.write("            <th>설치기관</th>\n");
      out.write("            <th>서비스구분</th>\n");
      out.write("            <th>망종류</th>\n");
      out.write("            <th>설치년도</th>\n");
      out.write("            <th>실내외구분</th>\n");
      out.write("            <th>WIFI접속환경</th>\n");
      out.write("            <th>X좌표</th>\n");
      out.write("            <th>Y좌표</th>\n");
      out.write("            <th>작업일자</th>\n");
      out.write("        </tr>\n");
      out.write("        </thead>\n");
      out.write("\n");
      out.write("    <tbody>\n");
      out.write("    ");

    if (lat != null && lnt != null) {
    SearchWifi searchWifi = new SearchWifi();
    HistoryDao historyDao = new HistoryDao();
    historyDao.saveHistory(lat, lnt);

    List<WifiDto> list = searchWifi.getNearbyWifi(lat, lnt);

        if (list != null) {
            for (WifiDto wifiDto : list) {
        
      out.write("\n");
      out.write("        <tr>\n");
      out.write("            <td>");
      out.print(wifiDto.getDistance());
      out.write("</td>\n");
      out.write("            <td>");
      out.print(wifiDto.getX_SWIFI_MGR_NO());
      out.write("</td>\n");
      out.write("            <td>");
      out.print(wifiDto.getX_SWIFI_WRDOFC());
      out.write("</td>\n");
      out.write("            <td>\n");
      out.write("                <a href=\"wifi/detail_wifi.jsp?mgrNo=");
      out.print( wifiDto.getX_SWIFI_MGR_NO() );
      out.write("&distance=");
      out.print( wifiDto.getDistance() );
      out.write('"');
      out.write('>');
      out.print( wifiDto.getX_SWIFI_MAIN_NM() );
      out.write("</a>\n");
      out.write("            </td>\n");
      out.write("            <td>");
      out.print(wifiDto.getX_SWIFI_ADRES1());
      out.write("</td>\n");
      out.write("            <td>");
      out.print(wifiDto.getX_SWIFI_ADRES2());
      out.write("</td>\n");
      out.write("            <td>");
      out.print(wifiDto.getX_SWIFI_INSTL_FLOOR());
      out.write("</td>\n");
      out.write("            <td>");
      out.print(wifiDto.getX_SWIFI_INSTL_TY());
      out.write("</td>\n");
      out.write("            <td>");
      out.print(wifiDto.getX_SWIFI_INSTL_MBY());
      out.write("</td>\n");
      out.write("            <td>");
      out.print(wifiDto.getX_SWIFI_SVC_SE());
      out.write("</td>\n");
      out.write("            <td>");
      out.print(wifiDto.getX_SWIFI_CMCWR());
      out.write("</td>\n");
      out.write("            <td>");
      out.print(wifiDto.getX_SWIFI_CNSTC_YEAR());
      out.write("</td>\n");
      out.write("            <td>");
      out.print(wifiDto.getX_SWIFI_INOUT_DOOR());
      out.write("</td>\n");
      out.write("            <td>");
      out.print(wifiDto.getX_SWIFI_REMARS3());
      out.write("</td>\n");
      out.write("            <td>");
      out.print(wifiDto.getLAT());
      out.write("</td>\n");
      out.write("            <td>");
      out.print(wifiDto.getLNT());
      out.write("</td>\n");
      out.write("            <td>");
      out.print(wifiDto.getWORK_DTTM());
      out.write("</td>\n");
      out.write("        </tr>\n");
      out.write("            ");
 } 
      out.write("\n");
      out.write("        ");
 } 
      out.write("\n");
      out.write("    ");
 } else { 
      out.write("\n");
      out.write("        <td colspan='17'> 위치 정보를 입력한 후에 조회해 주세요. </td>\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("    </tbody>\n");
      out.write("\n");
      out.write("</table>\n");
      out.write("</div>\n");
      out.write("</body>\n");
      out.write("\n");
      out.write("</body>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
